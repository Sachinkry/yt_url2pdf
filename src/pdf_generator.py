import os
import json
import logging
import subprocess
import time
from pathlib import Path

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_latex_distribution() -> bool:
    """Check if pdflatex and latexmk are available."""
    try:
        subprocess.run(['pdflatex', '--version'], check=True, capture_output=True, text=True)
        subprocess.run(['latexmk', '--version'], check=True, capture_output=True, text=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        logger.error("pdflatex or latexmk not found. Install BasicTeX with: brew install basictex")
        return False

def load_mapping_file() -> dict:
    """Load the JSON mapping file or initialize an empty one."""
    mapping_file = 'data/video_transcript_map.json'
    try:
        if os.path.exists(mapping_file):
            with open(mapping_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"Failed to load mapping file: {str(e)}")
        raise

def update_mapping_file(mapping: dict, input_path: str, pdf_path: str):
    """Update the JSON mapping file with PDF path."""
    mapping_file = 'data/video_transcript_map.json'
    try:
        if input_path in mapping:
            mapping[input_path]['pdf_path'] = pdf_path
            Path(mapping_file).parent.mkdir(parents=True, exist_ok=True)
            with open(mapping_file, 'w', encoding='utf-8') as f:
                json.dump(mapping, f, indent=2)
            logger.info(f"Updated mapping file with PDF path: {pdf_path}")
    except Exception as e:
        logger.error(f"Failed to update mapping file: {str(e)}")
        raise

def compile_latex_to_pdf(tex_path: str, index: int, max_retries: int = 3) -> str:
    """Compile LaTeX file to PDF using latexmk with retries."""
    start_time = time.time()
    try:
        if not check_latex_distribution():
            raise EnvironmentError("LaTeX distribution not found. Install BasicTeX.")

        # Validate input file
        if not os.path.exists(tex_path):
            logger.error(f"LaTeX file {tex_path} does not exist")
            raise FileNotFoundError(f"LaTeX file {tex_path} does not exist")

        # Get paths
        output_dir = 'data/pdf'
        Path(output_dir).mkdir(parents=True, exist_ok=True)
        # Expected PDF name from latexmk (based on tex file name)
        actual_pdf_name = f"{Path(tex_path).stem}.pdf"  # e.g., 010_latex.pdf
        actual_pdf_path = f"{output_dir}/{actual_pdf_name}"
        # Desired PDF name
        pdf_path = f"{output_dir}/{index:03d}_video.pdf"  # e.g., data/pdf/010_video.pdf

        # Load mapping to find input_path
        mapping = load_mapping_file()
        input_path = next((k for k, v in mapping.items() if v.get('latex_path') == tex_path), None)
        if not input_path:
            logger.error(f"No mapping found for LaTeX file {tex_path}")
            raise ValueError(f"No mapping found for LaTeX file {tex_path}")

        for attempt in range(1, max_retries + 1):
            try:
                # Compile LaTeX to PDF with latexmk using pdflatex
                latexmk_cmd = [
                    'latexmk',
                    '-pdf',
                    '-pdflatex=pdflatex',
                    '-interaction=nonstopmode',
                    f'-outdir={output_dir}',
                    tex_path
                ]
                result = subprocess.run(latexmk_cmd, check=True, capture_output=True, text=True)
                logger.info(f"Ran latexmk for {tex_path}")
                logger.debug(f"latexmk stdout: {result.stdout}")
                logger.debug(f"latexmk stderr: {result.stderr}")

                # Check for the actual PDF generated by latexmk
                if not os.path.exists(actual_pdf_path):
                    logger.error(f"PDF {actual_pdf_path} was not created")
                    # Check the .log file for errors
                    log_path = f"{output_dir}/{Path(tex_path).stem}.log"
                    if os.path.exists(log_path):
                        with open(log_path, 'r', encoding='utf-8') as f:
                            log_content = f.read()
                            logger.error(f"LaTeX compilation log:\n{log_content}")
                            # Check for table overflow or related warnings
                            if "Overfull \\hbox" in log_content:
                                logger.warning("Table or content may be too wide for the page. Consider adjusting table widths or page margins.")
                    raise FileNotFoundError(f"PDF {actual_pdf_path} was not created")

                # Rename the PDF to the desired name
                os.rename(actual_pdf_path, pdf_path)
                logger.info(f"Renamed {actual_pdf_path} to {pdf_path}")

                # Clean up auxiliary files
                clean_cmd = ['latexmk', '-c', f'-outdir={output_dir}', tex_path]
                subprocess.run(clean_cmd, check=True, capture_output=True, text=True)
                logger.info(f"Cleaned auxiliary files for {tex_path}")

                # Verify the renamed PDF exists
                if not os.path.exists(pdf_path):
                    logger.error(f"Renamed PDF {pdf_path} does not exist after renaming")
                    raise FileNotFoundError(f"Renamed PDF {pdf_path} does not exist")

                # Update JSON mapping
                update_mapping_file(mapping, input_path, pdf_path)
                
                elapsed_time = time.time() - start_time
                logger.info(f"*** LaTeX compilation took {elapsed_time:.2f} seconds ***")
                return pdf_path

            except subprocess.CalledProcessError as e:
                logger.error(f"Attempt {attempt} failed: latexmk error: {e.stderr}")
                if attempt < max_retries:
                    logger.info(f"Retrying compilation (attempt {attempt + 1}/{max_retries})")
                    time.sleep(2)
                else:
                    logger.error(f"Failed to compile LaTeX after {max_retries} attempts: {e.stderr}")
                    raise
            except Exception as e:
                logger.error(f"Attempt {attempt} failed: {str(e)}")
                if attempt < max_retries:
                    logger.info(f"Retrying compilation (attempt {attempt + 1}/{max_retries})")
                    time.sleep(2)
                else:
                    logger.error(f"Failed to compile LaTeX after {max_retries} attempts: {str(e)}")
                    raise

    except Exception as e:
        elapsed_time = time.time() - start_time
        logger.info(f"LaTeX compilation (failed) took {elapsed_time:.2f} seconds")
        raise

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 2:
        print("Usage: python compile_latex.py <tex_path>")
        sys.exit(1)
    # Note: CLI usage doesn't provide an index, so this will fail in the streamlined pipeline
    # This is fine for standalone testing but will need to be handled in main.py
    compile_latex_to_pdf(sys.argv[1], 0)  # Temporary index for standalone testing